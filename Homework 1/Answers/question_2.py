# -*- coding: utf-8 -*-
"""question_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j7yq1rKXMhHCqzRTJUN7vm6lqnw3UxmV
"""

import os
import itertools

def identify_items(item_set):
	frequent = {}
	for item,n in item_set.items():
		if n >= 100:
			frequent.update({item:n})
	return frequent

def find_itemset(itemset_size, sessions, frequent_items):
	combinations = itertools.combinations(sorted(frequent_items),itemset_size)
	itemset = {}

	for i in combinations:
		itemset[i] = 0
	
	for session in sessions:
		items_in_session = []
		for i in session:
			if i in frequent_items:
				items_in_session.append(i)
		items_in_session = sorted(items_in_session)
		item_comb = itertools.combinations(items_in_session, itemset_size)
		for j in item_comb:
			if j in itemset:
				itemset[j] += 1

	return itemset

def compute_confidence_score(itemset_size, frequent_itemset, frequent_comb):
	confidence_scores = []
	itemset_size = itemset_size - 1

	for itemset, n in frequent_comb.items():
		if(itemset_size==1):
			A = (itemset[0],itemset[1])
			B = n/frequent_itemset[itemset[0]]
			confidence_scores.append((A,B))					

			B = (itemset[1],itemset[0])
			A = n/frequent_itemset[itemset[1]]
			confidence_scores.append((B,A))
		else: 	
			combinations = itertools.combinations(itemset, itemset_size)
			for i in combinations:
				if i in frequent_itemset:
					confidence_scores.append((tuple(list(i) + list(set(itemset)-set(i))), n/frequent_itemset[i]))

	return confidence_scores

if __name__ == "__main__":

  #Reading browsing.txt
	file_path = os.getcwd()
	file_path += '/browsing.txt'
	my_file = open(file_path,"r")

	sessions = [] # browsing sessions of a customer
	item_id = {} # id of an item
  
	for line in my_file:
		session = line.strip().split(' ')
		for item in session:
			if item in item_id:
				item_id[item] += 1
			else:
				item_id[item] = 1
		sessions.append(set(session))
  
	items_identified = identify_items(item_id)
	item_set_1 = find_itemset(2, sessions, items_identified)
	frequent_items_1 = identify_items(item_set_1)
	frequent_items_confidence_1 = compute_confidence_score(2, items_identified, frequent_items_1)
	frequent_items_confidence_1.sort(key = lambda x:(-x[1], x[0]))
 
	print("Top 5 rules with confidence scores for 2(d)\n")
	for id in frequent_items_confidence_1[:5]:
		print(id[0][0], " -> ", id[0][1], "     ", id[1])
	print("\n\n")
	triples = []
	for i in frequent_items_1:
		for j in i:
			if j not in triples:
				triples.append(j)
		
	itemset_2 = find_itemset(3, sessions, triples)
	frequent_items_2 = identify_items(itemset_2)
	frequent_items_confidence_2 = compute_confidence_score(3, frequent_items_1, frequent_items_2)
	frequent_items_confidence_2.sort(key = lambda x:(-x[1], x[0]))
 
	print("Top 5 rules with confidence scores for 2(e)\n")
	for temp in frequent_items_confidence_2[:5]:
		print(temp[0][0], ", ", temp[0][1], " -> ", temp[0][2],"     ", temp[1])